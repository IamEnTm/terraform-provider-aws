// Code generated by internal/generate/servicepackages/main.go; DO NOT EDIT.

package {{ .ProviderPackage }}

import (
	"context"

	"github.com/hashicorp/terraform-provider-aws/internal/types"
{{- if ne .ProviderPackage "meta" }}
	"github.com/hashicorp/terraform-provider-aws/names"
{{- end }}
)

type servicePackage struct {}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource {
{{- range .FrameworkDataSources }}
		{
			Factory: {{ .FactoryName }},
		},
{{- end }}
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource {
{{- range .FrameworkResources }}
		{
			Factory: {{ .FactoryName }},
		},
{{- end }}
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource {
{{- range $key, $value := .SDKDataSources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
		},
{{- end }}
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource {
{{- range $key, $value := .SDKResources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
		},
{{- end }}
	}
}

func (p *servicePackage) ServicePackageName() string {
{{- if eq .ProviderPackage "meta" }}
	return "{{ .ProviderPackage }}"
{{- else }}
	return names.{{ .ProviderNameUpper }}
{{- end }}
}

var ServicePackage = &servicePackage{}
