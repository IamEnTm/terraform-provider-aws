---
subcategory: "Transit Gateway"
layout: "aws"
page_title: "AWS: aws_ec2_transit_gateway_multicast_domain"
description: |-
  Manages an EC2 Transit Gateway Multicast Domain
---

# Resource: aws_ec2_transit_gateway_multicast_domain

Manages an EC2 Transit Gateway Multicast Domain.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.aws as aws
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_ec2_transit_gateway_tgw = aws.ec2_transit_gateway.Ec2TransitGateway(self, "tgw",
            multicast_support="enable"
        )
        aws_ec2_transit_gateway_multicast_domain_domain =
        aws.ec2_transit_gateway_multicast_domain.Ec2TransitGatewayMulticastDomain(self, "domain",
            static_sources_support="enable",
            tags={
                "Name": "Transit_Gateway_Multicast_Domain_Example"
            },
            transit_gateway_id=cdktf.Token.as_string(aws_ec2_transit_gateway_tgw.id)
        )
        aws_vpc_vpc1 = aws.vpc.Vpc(self, "vpc1",
            cidr_block="10.0.0.0/16"
        )
        aws_vpc_vpc2 = aws.vpc.Vpc(self, "vpc2",
            cidr_block="10.1.0.0/16"
        )
        data_aws_ami_amazon_linux = aws.data_aws_ami.DataAwsAmi(self, "amazon_linux",
            filter=[DataAwsAmiFilter(
                name="name",
                values=["amzn-ami-hvm-*-x86_64-gp2"]
            ), DataAwsAmiFilter(
                name="owner-alias",
                values=["amazon"]
            )
            ],
            most_recent=True,
            owners=["amazon"]
        )
        data_aws_availability_zones_available =
        aws.data_aws_availability_zones.DataAwsAvailabilityZones(self, "available",
            state="available"
        )
        aws_subnet_subnet1 = aws.subnet.Subnet(self, "subnet1",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_aws_availability_zones_available.names, ["0"])),
            cidr_block="10.0.1.0/24",
            vpc_id=cdktf.Token.as_string(aws_vpc_vpc1.id)
        )
        aws_subnet_subnet2 = aws.subnet.Subnet(self, "subnet2",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_aws_availability_zones_available.names, ["1"])),
            cidr_block="10.0.2.0/24",
            vpc_id=cdktf.Token.as_string(aws_vpc_vpc1.id)
        )
        aws_subnet_subnet3 = aws.subnet.Subnet(self, "subnet3",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_aws_availability_zones_available.names, ["0"])),
            cidr_block="10.1.1.0/24",
            vpc_id=cdktf.Token.as_string(aws_vpc_vpc2.id)
        )
        aws_ec2_transit_gateway_vpc_attachment_attachment1 =
        aws.ec2_transit_gateway_vpc_attachment.Ec2TransitGatewayVpcAttachment(self, "attachment1",
            subnet_ids=[
                cdktf.Token.as_string(aws_subnet_subnet1.id),
                cdktf.Token.as_string(aws_subnet_subnet2.id)
            ],
            transit_gateway_id=cdktf.Token.as_string(aws_ec2_transit_gateway_tgw.id),
            vpc_id=cdktf.Token.as_string(aws_vpc_vpc1.id)
        )
        aws_ec2_transit_gateway_vpc_attachment_attachment2 =
        aws.ec2_transit_gateway_vpc_attachment.Ec2TransitGatewayVpcAttachment(self, "attachment2",
            subnet_ids=[cdktf.Token.as_string(aws_subnet_subnet3.id)],
            transit_gateway_id=cdktf.Token.as_string(aws_ec2_transit_gateway_tgw.id),
            vpc_id=cdktf.Token.as_string(aws_vpc_vpc2.id)
        )
        aws_instance_instance1 = aws.instance.Instance(self, "instance1",
            ami=cdktf.Token.as_string(data_aws_ami_amazon_linux.id),
            instance_type="t2.micro",
            subnet_id=cdktf.Token.as_string(aws_subnet_subnet1.id)
        )
        aws_instance_instance2 = aws.instance.Instance(self, "instance2",
            ami=cdktf.Token.as_string(data_aws_ami_amazon_linux.id),
            instance_type="t2.micro",
            subnet_id=cdktf.Token.as_string(aws_subnet_subnet2.id)
        )
        aws_instance_instance3 = aws.instance.Instance(self, "instance3",
            ami=cdktf.Token.as_string(data_aws_ami_amazon_linux.id),
            instance_type="t2.micro",
            subnet_id=cdktf.Token.as_string(aws_subnet_subnet3.id)
        )
        aws_ec2_transit_gateway_multicast_domain_association_association1 =
        aws.ec2_transit_gateway_multicast_domain_association.Ec2TransitGatewayMulticastDomainAssociation(self, "association1",
            subnet_id=cdktf.Token.as_string(aws_subnet_subnet1.id),
            transit_gateway_attachment_id=cdktf.Token.as_string(aws_ec2_transit_gateway_vpc_attachment_attachment1.id),
            transit_gateway_multicast_domain_id=cdktf.Token.as_string(aws_ec2_transit_gateway_multicast_domain_domain.id)
        )
        aws.ec2_transit_gateway_multicast_domain_association.Ec2TransitGatewayMulticastDomainAssociation(self, "association2",
            subnet_id=cdktf.Token.as_string(aws_subnet_subnet2.id),
            transit_gateway_attachment_id=cdktf.Token.as_string(aws_ec2_transit_gateway_vpc_attachment_attachment2.id),
            transit_gateway_multicast_domain_id=cdktf.Token.as_string(aws_ec2_transit_gateway_multicast_domain_domain.id)
        )
        aws_ec2_transit_gateway_multicast_domain_association_association3 =
        aws.ec2_transit_gateway_multicast_domain_association.Ec2TransitGatewayMulticastDomainAssociation(self, "association3",
            subnet_id=cdktf.Token.as_string(aws_subnet_subnet3.id),
            transit_gateway_attachment_id=cdktf.Token.as_string(aws_ec2_transit_gateway_vpc_attachment_attachment2.id),
            transit_gateway_multicast_domain_id=cdktf.Token.as_string(aws_ec2_transit_gateway_multicast_domain_domain.id)
        )
        aws.ec2_transit_gateway_multicast_group_member.Ec2TransitGatewayMulticastGroupMember(self, "member1",
            group_ip_address="224.0.0.1",
            network_interface_id=cdktf.Token.as_string(aws_instance_instance1.primary_network_interface_id),
            transit_gateway_multicast_domain_id=cdktf.Token.as_string(aws_ec2_transit_gateway_multicast_domain_association_association1.transit_gateway_multicast_domain_id)
        )
        aws.ec2_transit_gateway_multicast_group_member.Ec2TransitGatewayMulticastGroupMember(self, "member2",
            group_ip_address="224.0.0.1",
            network_interface_id=cdktf.Token.as_string(aws_instance_instance2.primary_network_interface_id),
            transit_gateway_multicast_domain_id=cdktf.Token.as_string(aws_ec2_transit_gateway_multicast_domain_association_association1.transit_gateway_multicast_domain_id)
        )
        aws.ec2_transit_gateway_multicast_group_source.Ec2TransitGatewayMulticastGroupSource(self, "source",
            group_ip_address="224.0.0.1",
            network_interface_id=cdktf.Token.as_string(aws_instance_instance3.primary_network_interface_id),
            transit_gateway_multicast_domain_id=cdktf.Token.as_string(aws_ec2_transit_gateway_multicast_domain_association_association3.transit_gateway_multicast_domain_id)
        )
```

## Argument Reference

The following arguments are supported:

* `transit_gateway_id` - (Required) EC2 Transit Gateway identifier. The EC2 Transit Gateway must have `multicast_support` enabled.
* `auto_accept_shared_associations` - (Optional) Whether to automatically accept cross-account subnet associations that are associated with the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
* `igmpv2_support` - (Optional) Whether to enable Internet Group Management Protocol (IGMP) version 2 for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
* `static_sources_support` - (Optional) Whether to enable support for statically configuring multicast group sources for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
* `tags` - (Optional) Key-value tags for the EC2 Transit Gateway Multicast Domain. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - EC2 Transit Gateway Multicast Domain identifier.
* `arn` - EC2 Transit Gateway Multicast Domain Amazon Resource Name (ARN).
* `owner_id` - Identifier of the AWS account that owns the EC2 Transit Gateway Multicast Domain.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

`aws_ec2_transit_gateway_multicast_domain` can be imported by using the EC2 Transit Gateway Multicast Domain identifier, e.g.,

```
terraform import aws_ec2_transit_gateway_multicast_domain.example tgw-mcast-domain-12345
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-af570cc56449ad3f3c4b5a829709b1b5977e549ce5e66e168ab6e20788f81ed8 -->